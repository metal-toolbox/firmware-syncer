name: firmware-syncer CI
on:
  push:
    branches:
      - '*'
    tags:
      - 'v*.*.*'
      - 'v*.*.*-staging'
  pull_request:
    branches:
      - '*'
jobs:
  lint-test-build-artifacts:
    name: üèóÔ∏è  Lint, test and build
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v3
      with:
        go-version: '1.17'
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Configure git for private modules
      env:
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: git config --global url."https://${TOKEN}:x-oauth-basic@github.com".insteadOf "https://github.com/equinixmetal"

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.45.2
        args: --config .golangci.yml --timeout=5m

    - name: Run firmware-syncer tests
      run: make test

    - name: Build firmware-syncer executable
      run: make build

    - uses: actions/upload-artifact@v3
      with:
        name: firmware-syncer-artifacts
        path: |
          firmware-syncer
          firmware-syncer_checksum.txt

  publish-executables:
    name: üì¶ Publish firmware-syncer executable
    runs-on: ubuntu-latest
    if: ( contains(github.ref, 'tags') && ! contains(github.ref, 'staging') )
    needs: lint-test-build-artifacts
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v3
        with:
          go-version: '1.17'
        id: go

      - name: Set git token env var
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git config --global url."https://${TOKEN}:x-oauth-basic@github.com".insteadOf "https://github.com/equinixmetal"

      - uses: actions/download-artifact@v3
        with:
          name: firmware-syncer-artifacts

      - name: Create a new release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: release artifact files
        uses: softprops/action-gh-release@v1
        if: contains(github.ref, 'tags')
        with:
          files: |
            firmware-syncer
            firmware-syncer_checksum.txt

  publish-docker-images:
    name: üê≥ Build and push docker images
    runs-on: ubuntu-20.04
    if: contains(github.ref, 'tags')
    needs: lint-test-build-artifacts
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: firmware-syncer-artifacts

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Set latest tag
        id: releaseSetLatestTag
        shell: bash
        run: |
          if [[ "$GITHUB_REF" =~ ^refs/tags/v*.*.*-staging ]]; then
            echo -n "::set-output name=latest::false"
          else
            echo -n "::set-output name=latest::true"
          fi

      - name: Set latest staging tag
        id: releaseSetLatestStagingTag
        shell: bash
        run: |
          if [[ "$GITHUB_REF" =~ ^refs/tags/v*.*.*-staging ]]; then
            echo -n "::set-output name=latest-staging::true"
          else
            echo -n "::set-output name=latest-staging::false"
          fi

      - name: Docker meta
        uses: docker/metadata-action@v3
        id: meta_docker_firmware-syncer
        with:
          images: quay.io/packet/firmware-syncer
          flavor: |
            latest=${{ steps.releaseSetLatestTag.outputs.latest }}
          tags: |
            type=raw,enable=${{ steps.releaseSetLatestStagingTag.outputs.latest-staging }},value=latest-staging
            type=ref,event=branch
            type=semver,pattern={{raw}}

      - name: Login to Quay registry
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push fup docker image
        id: docker_build_fup
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./
          file: Dockerfile
          tags: "${{ steps.meta_docker_fup.outputs.tags }}"
