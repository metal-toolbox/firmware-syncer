// Code generated by MockGen. DO NOT EDIT.
// Source: syncer_test.go
//
// Generated by this command:
//
//	mockgen -source=syncer_test.go -destination=mocks/rclone.go RCloneInfo
//
// Package mock_vendors is a generated GoMock package.
package mock_vendors

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	fs "github.com/rclone/rclone/fs"
	hash "github.com/rclone/rclone/fs/hash"
	gomock "go.uber.org/mock/gomock"
)

// MockRCloneFS is a mock of RCloneFS interface.
type MockRCloneFS struct {
	ctrl     *gomock.Controller
	recorder *MockRCloneFSMockRecorder
}

// MockRCloneFSMockRecorder is the mock recorder for MockRCloneFS.
type MockRCloneFSMockRecorder struct {
	mock *MockRCloneFS
}

// NewMockRCloneFS creates a new mock instance.
func NewMockRCloneFS(ctrl *gomock.Controller) *MockRCloneFS {
	mock := &MockRCloneFS{ctrl: ctrl}
	mock.recorder = &MockRCloneFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRCloneFS) EXPECT() *MockRCloneFSMockRecorder {
	return m.recorder
}

// Features mocks base method.
func (m *MockRCloneFS) Features() *fs.Features {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].(*fs.Features)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *MockRCloneFSMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockRCloneFS)(nil).Features))
}

// Hashes mocks base method.
func (m *MockRCloneFS) Hashes() hash.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hashes")
	ret0, _ := ret[0].(hash.Set)
	return ret0
}

// Hashes indicates an expected call of Hashes.
func (mr *MockRCloneFSMockRecorder) Hashes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashes", reflect.TypeOf((*MockRCloneFS)(nil).Hashes))
}

// List mocks base method.
func (m *MockRCloneFS) List(ctx context.Context, dir string) (fs.DirEntries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, dir)
	ret0, _ := ret[0].(fs.DirEntries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRCloneFSMockRecorder) List(ctx, dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRCloneFS)(nil).List), ctx, dir)
}

// Mkdir mocks base method.
func (m *MockRCloneFS) Mkdir(ctx context.Context, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", ctx, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockRCloneFSMockRecorder) Mkdir(ctx, dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockRCloneFS)(nil).Mkdir), ctx, dir)
}

// Name mocks base method.
func (m *MockRCloneFS) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRCloneFSMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRCloneFS)(nil).Name))
}

// NewObject mocks base method.
func (m *MockRCloneFS) NewObject(ctx context.Context, remote string) (fs.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewObject", ctx, remote)
	ret0, _ := ret[0].(fs.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewObject indicates an expected call of NewObject.
func (mr *MockRCloneFSMockRecorder) NewObject(ctx, remote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewObject", reflect.TypeOf((*MockRCloneFS)(nil).NewObject), ctx, remote)
}

// Precision mocks base method.
func (m *MockRCloneFS) Precision() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Precision")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Precision indicates an expected call of Precision.
func (mr *MockRCloneFSMockRecorder) Precision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Precision", reflect.TypeOf((*MockRCloneFS)(nil).Precision))
}

// Put mocks base method.
func (m *MockRCloneFS) Put(ctx context.Context, in io.Reader, src fs.ObjectInfo, options ...fs.OpenOption) (fs.Object, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in, src}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(fs.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockRCloneFSMockRecorder) Put(ctx, in, src any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in, src}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRCloneFS)(nil).Put), varargs...)
}

// Rmdir mocks base method.
func (m *MockRCloneFS) Rmdir(ctx context.Context, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rmdir", ctx, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rmdir indicates an expected call of Rmdir.
func (mr *MockRCloneFSMockRecorder) Rmdir(ctx, dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rmdir", reflect.TypeOf((*MockRCloneFS)(nil).Rmdir), ctx, dir)
}

// Root mocks base method.
func (m *MockRCloneFS) Root() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(string)
	return ret0
}

// Root indicates an expected call of Root.
func (mr *MockRCloneFSMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockRCloneFS)(nil).Root))
}

// String mocks base method.
func (m *MockRCloneFS) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockRCloneFSMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRCloneFS)(nil).String))
}

// MockRCloneObject is a mock of RCloneObject interface.
type MockRCloneObject struct {
	ctrl     *gomock.Controller
	recorder *MockRCloneObjectMockRecorder
}

// MockRCloneObjectMockRecorder is the mock recorder for MockRCloneObject.
type MockRCloneObjectMockRecorder struct {
	mock *MockRCloneObject
}

// NewMockRCloneObject creates a new mock instance.
func NewMockRCloneObject(ctrl *gomock.Controller) *MockRCloneObject {
	mock := &MockRCloneObject{ctrl: ctrl}
	mock.recorder = &MockRCloneObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRCloneObject) EXPECT() *MockRCloneObjectMockRecorder {
	return m.recorder
}

// Fs mocks base method.
func (m *MockRCloneObject) Fs() fs.Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fs")
	ret0, _ := ret[0].(fs.Info)
	return ret0
}

// Fs indicates an expected call of Fs.
func (mr *MockRCloneObjectMockRecorder) Fs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fs", reflect.TypeOf((*MockRCloneObject)(nil).Fs))
}

// Hash mocks base method.
func (m *MockRCloneObject) Hash(ctx context.Context, ty hash.Type) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", ctx, ty)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockRCloneObjectMockRecorder) Hash(ctx, ty any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockRCloneObject)(nil).Hash), ctx, ty)
}

// ModTime mocks base method.
func (m *MockRCloneObject) ModTime(arg0 context.Context) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModTime", arg0)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ModTime indicates an expected call of ModTime.
func (mr *MockRCloneObjectMockRecorder) ModTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModTime", reflect.TypeOf((*MockRCloneObject)(nil).ModTime), arg0)
}

// Open mocks base method.
func (m *MockRCloneObject) Open(ctx context.Context, options ...fs.OpenOption) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Open", varargs...)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockRCloneObjectMockRecorder) Open(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockRCloneObject)(nil).Open), varargs...)
}

// Remote mocks base method.
func (m *MockRCloneObject) Remote() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remote")
	ret0, _ := ret[0].(string)
	return ret0
}

// Remote indicates an expected call of Remote.
func (mr *MockRCloneObjectMockRecorder) Remote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockRCloneObject)(nil).Remote))
}

// Remove mocks base method.
func (m *MockRCloneObject) Remove(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRCloneObjectMockRecorder) Remove(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRCloneObject)(nil).Remove), ctx)
}

// SetModTime mocks base method.
func (m *MockRCloneObject) SetModTime(ctx context.Context, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModTime", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModTime indicates an expected call of SetModTime.
func (mr *MockRCloneObjectMockRecorder) SetModTime(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModTime", reflect.TypeOf((*MockRCloneObject)(nil).SetModTime), ctx, t)
}

// Size mocks base method.
func (m *MockRCloneObject) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockRCloneObjectMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockRCloneObject)(nil).Size))
}

// Storable mocks base method.
func (m *MockRCloneObject) Storable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Storable indicates an expected call of Storable.
func (mr *MockRCloneObjectMockRecorder) Storable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storable", reflect.TypeOf((*MockRCloneObject)(nil).Storable))
}

// String mocks base method.
func (m *MockRCloneObject) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockRCloneObjectMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRCloneObject)(nil).String))
}

// Update mocks base method.
func (m *MockRCloneObject) Update(ctx context.Context, in io.Reader, src fs.ObjectInfo, options ...fs.OpenOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in, src}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRCloneObjectMockRecorder) Update(ctx, in, src any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in, src}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRCloneObject)(nil).Update), varargs...)
}

// MockRCloneInfo is a mock of RCloneInfo interface.
type MockRCloneInfo struct {
	ctrl     *gomock.Controller
	recorder *MockRCloneInfoMockRecorder
}

// MockRCloneInfoMockRecorder is the mock recorder for MockRCloneInfo.
type MockRCloneInfoMockRecorder struct {
	mock *MockRCloneInfo
}

// NewMockRCloneInfo creates a new mock instance.
func NewMockRCloneInfo(ctrl *gomock.Controller) *MockRCloneInfo {
	mock := &MockRCloneInfo{ctrl: ctrl}
	mock.recorder = &MockRCloneInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRCloneInfo) EXPECT() *MockRCloneInfoMockRecorder {
	return m.recorder
}

// Features mocks base method.
func (m *MockRCloneInfo) Features() *fs.Features {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].(*fs.Features)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *MockRCloneInfoMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockRCloneInfo)(nil).Features))
}

// Hashes mocks base method.
func (m *MockRCloneInfo) Hashes() hash.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hashes")
	ret0, _ := ret[0].(hash.Set)
	return ret0
}

// Hashes indicates an expected call of Hashes.
func (mr *MockRCloneInfoMockRecorder) Hashes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashes", reflect.TypeOf((*MockRCloneInfo)(nil).Hashes))
}

// Name mocks base method.
func (m *MockRCloneInfo) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRCloneInfoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRCloneInfo)(nil).Name))
}

// Precision mocks base method.
func (m *MockRCloneInfo) Precision() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Precision")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Precision indicates an expected call of Precision.
func (mr *MockRCloneInfoMockRecorder) Precision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Precision", reflect.TypeOf((*MockRCloneInfo)(nil).Precision))
}

// Root mocks base method.
func (m *MockRCloneInfo) Root() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(string)
	return ret0
}

// Root indicates an expected call of Root.
func (mr *MockRCloneInfoMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockRCloneInfo)(nil).Root))
}

// String mocks base method.
func (m *MockRCloneInfo) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockRCloneInfoMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRCloneInfo)(nil).String))
}
